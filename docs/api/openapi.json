{
  "openapi": "3.0.0",
  "info": {
    "version": "1.0.0",
    "title": "Users",
    "license": {
      "name": ""
    }
  },
  "servers": [
    {
      "url": "{protocol}://{host}:{port}/api/v1",
      "variables": {
        "protocol": {
          "default": "https",
          "enum": ["http", "https"]
        },
        "port": {
          "enum": ["9000", "9000"],
          "default": "9000"
        },
        "host": {
          "default": "api.user.com",
          "enum": ["localhost", "api-dev.user.com"]
        }
      }
    }
  ],
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "paths": {
    "/signup": {
      "get": {
        "summary": "Registers a user with backend",
        "operationId": "getToken",
        "tags": ["User"],
        "requestBody": {
          "description": "This api will allow to SignUp.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SignUpRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success response with Endpoint.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SignUpResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict response with Endpoint.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ConflictError"
                }
              }
            }
          },
          "500": {
            "description": "Failure response with status as false and error from backend",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/login": {
      "post": {
        "summary": "Generates a Bearer Token",
        "operationId": "login",
        "tags": ["User"],
        "parameters": [
          {
            "in": "header",
            "name": "Content-Type",
            "description": "Content type of the body, should always be set to application/json unless specified otherwise.",
            "schema": {
              "type": "string",
              "example": "application/json"
            },
            "required": true
          }
        ],
        "requestBody": {
          "description": "Request to get a Bearer token.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success response with bearer access token.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResponse"
                }
              }
            }
          },
          "404": {
            "description": "An object with status as false and error of \"Not Found\".",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "500": {
            "description": "Failure response with status as false and error from backend.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    },
    "/users": {
      "put": {
        "summary": "Update Users",
        "operationId": "Update User By Id",
        "tags": ["User"],
        "parameters": [
          {
            "in": "header",
            "name": "Content-Type",
            "description": "Content type of the body, should always be set to application/json unless specified otherwise.",
            "schema": {
              "type": "string",
              "example": "application/json"
            },
            "required": true
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Bearer token for authorization purpose.",
            "schema": {
              "type": "string",
              "format": "bearer"
            },
            "required": true
          }
        ],
        "requestBody": {
          "description": "Request to update a Client Details.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserInformationRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success response with status as true and data set to the updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserInformationResponse"
                }
              }
            }
          },
          "401": {
            "description": "Failure response with status as false and error of unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "404": {
            "description": "Failure response with status as false and error of Not Found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "500": {
            "description": "Failure message with status as false and error from backend.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "List all Users",
        "operationId": "getAllUsers",
        "tags": ["User"],
        "parameters": [
          {
            "in": "header",
            "name": "Content-Type",
            "description": "Content type of the body, should always be set to application/json unless specified otherwise.",
            "schema": {
              "type": "string",
              "example": "application/json"
            },
            "required": true
          },
          {
            "in": "header",
            "name": "Authorization",
            "description": "Bearer token for authorization purpose.",
            "schema": {
              "type": "string",
              "format": "bearer"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Success response with Endpoint.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/getUsersResponse"
                }
              }
            }
          },
          "401": {
            "description": "Failure response with status as false and error of unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedError"
                }
              }
            }
          },
          "500": {
            "description": "Failure message with status as false and error from backend.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerError"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "bearerAuth": {}
    },
    "schemas": {
      "SignUpRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Alias"
          },
          "email": {
            "type": "alias",
            "example": "alias@yopmail.com"
          },
          "password": {
            "type": "password",
            "example": "secret"
          },
          "confirmPassword": {
            "type": "password",
            "example": "secret"
          }
        },
        "required": ["name", "email", "password", "confirmPasword"]
      },
      "SignUpResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "boolean",
            "default": true,
            "example": true
          },
          "data": {
            "type": "object",
            "properties": {
              "_id": {
                "type": "string",
                "format": "hex",
                "example": "5ed0024e93b0602b75d290f5"
              },
              "email": {
                "type": "email",
                "example": "alias@yopmail.com"
              },
              "name": {
                "type": "name",
                "example": "Alias"
              }
            }
          }
        },
        "required": ["status", "token"]
      },
      "User": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "example": "alias@yopmail.com"
          },
          "name": {
            "type": "string",
            "example": "Alias"
          },
          "address": {
            "type": "string",
            "example": "Street No."
          },
          "profilePicture": {
            "type": "string",
            "example": "image.jpg"
          },
          "gender": {
            "type": "String",
            "example": "male"
          },
          "maritalStatus": {
            "type": "String",
            "example": "married"
          },
          "dateOfBirth": {
            "type": "String",
            "example": "02-03-2019"
          }
        }
      },
      "AuthRequest": {
        "type": "object",
        "properties": {
          "email": {
            "type": "email",
            "example": "alias@yopmail.com"
          },
          "password": {
            "type": "password",
            "example": "secret"
          }
        },
        "required": ["email", "password"]
      },
      "LoginResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "boolean",
            "default": true,
            "example": true
          },
          "data": {
            "type": "object",
            "properties": {
              "_id": {
                "type": "string",
                "format": "hex",
                "example": "5ed0024e93b0602b75d290f5"
              },
              "email": {
                "type": "email",
                "example": "alias@yopmail.com"
              },
              "token": {
                "type": "string",
                "format": "bearer",
                "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI1ZWNmYjU3OWQ1MDE3OTFmOGVjM2Y1MGUiLCJyb2xlIjoiYWRtaW4iLCJpYXQiOjE1OTA3NDQ1NDJ9.TUoDPazRS_fLhRSXPJHiIAlNCnoYKPW1BEusrEJOkzg"
              }
            }
          }
        },
        "required": ["status", "token"]
      },
      "UserInformationRequest": {
        "type": "object",
        "properties": {
          "Address": {
            "type": "string",
            "example": "streenNumber, flat No."
          },
          "profilePicture": {
            "type": "file",
            "example": "image.png"
          },
          "gender": {
            "type": "string",
            "example": "male"
          },
          "maritalStatus": {
            "type": "string",
            "example": "married"
          },
          "dateOfBirth": {
            "type": "string",
            "example": "02-06-1994"
          }
        }
      },
      "UserInformationResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "boolean",
            "default": true,
            "example": true
          },
          "data": {
            "type": "object",
            "properties": {
              "_id": {
                "type": "address",
                "example": "street No."
              },
              "profilePicture": {
                "type": "file",
                "example": "image.png"
              },
              "gender": {
                "type": "string",
                "example": "male"
              },
              "maritalStatus": {
                "type": "string",
                "example": "married"
              },
              "dateOfBirth": {
                "type": "string",
                "example": "02-06-1994"
              }
            }
          }
        }
      },
      "getUsersResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "boolean",
            "default": true,
            "example": true
          },
          "type": "array",
          "data": {
            "items": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "address",
                  "example": "street No."
                },
                "name": {
                  "type": "string",
                  "example": "Alias"
                },
                "email": {
                  "type": "alias",
                  "example": "alias@yopmail.com"
                },
                "profilePicture": {
                  "type": "file",
                  "example": "image.png"
                },
                "gender": {
                  "type": "string",
                  "example": "male"
                },
                "maritalStatus": {
                  "type": "string",
                  "example": "married"
                },
                "dateOfBirth": {
                  "type": "string",
                  "example": "02-06-1994"
                }
              }
            }
          }
        },
        "required": ["name", "clientDetails"]
      },
      "BadRequestResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "boolean",
            "example": false
          },
          "error": {
            "type": "object",
            "properties": {
              "error": {
                "type": "string",
                "example": "BadRequestError"
              },
              "message": {
                "type": "string",
                "example": "Bad request bro"
              }
            }
          }
        }
      },
      "NotFoundResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "boolean",
            "default": false,
            "example": false
          },
          "error": {
            "type": "object",
            "properties": {
              "error": {
                "type": "string",
                "example": "NotFoundError"
              },
              "message": {
                "type": "string",
                "example": "Entity not found."
              }
            },
            "required": ["error", "message"]
          }
        },
        "required": ["status", "error"]
      },
      "ConflictError": {
        "type": "object",
        "properties": {
          "status": {
            "type": "boolean",
            "default": false,
            "example": false
          },
          "error": {
            "type": "object",
            "properties": {
              "error": {
                "type": "string",
                "example": "ConflictError"
              },
              "message": {
                "type": "string",
                "example": "This operations produces conflicts with the current state."
              }
            },
            "required": ["error", "message"]
          }
        },
        "required": ["status", "error"]
      },
      "UnauthorizedError": {
        "type": "object",
        "properties": {
          "status": {
            "type": "boolean",
            "default": false,
            "example": false
          },
          "error": {
            "type": "object",
            "properties": {
              "error": {
                "type": "string",
                "example": "UnauthorizedError"
              },
              "message": {
                "type": "string",
                "example": "Invalid Token."
              }
            },
            "required": ["error", "message"]
          }
        },
        "required": ["status", "error"]
      },
      "ForbiddenError": {
        "type": "object",
        "properties": {
          "status": {
            "type": "boolean",
            "default": false,
            "example": false
          },
          "error": {
            "type": "object",
            "properties": {
              "error": {
                "type": "string",
                "example": "ForbiddenError"
              },
              "message": {
                "type": "string",
                "example": "You are not allowed to call this API"
              }
            },
            "required": ["error", "message"]
          }
        },
        "required": ["status", "error"]
      },
      "InternalServerError": {
        "type": "object",
        "properties": {
          "status": {
            "type": "boolean",
            "default": false,
            "example": false
          },
          "error": {
            "type": "object",
            "properties": {
              "error": {
                "type": "string",
                "example": "TypeError"
              },
              "message": {
                "type": "string",
                "example": "Cannot cast date to integer."
              }
            },
            "required": ["error", "message"]
          }
        },
        "required": ["status", "error"]
      }
    }
  }
}
